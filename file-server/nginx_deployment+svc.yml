apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: openresty/openresty
        ports:
        - containerPort: 80
        volumeMounts:
          - name: data
            mountPath: "/usr/share/nginx/html"
          - name: nginx-config
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: nginx.conf
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: local-storage-pvc
        - name: nginx-config
          configMap:
            name: nginx-configmap

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  ports:
  - port: 80
    name: http
  selector:
    app: nginx

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: "nginx-configmap"
data:
  nginx.conf: |
    proxy_cache_path /tmp/mycache keys_zone=mycache:10m;
    server {
      listen       80;
      listen  [::]:80;

      proxy_cache mycache;
      proxy_cache_valid 200 600s;
      proxy_cache_lock on;
      # Immediately forward requests to the origin if we are filling the cache
      proxy_cache_lock_timeout 0s;
      # Set the 'age' to a value larger than the expected fill time
      proxy_cache_lock_age 200s;
      proxy_cache_use_stale updating;
      client_max_body_size           500M;
      
      server_name api.faang.org;
      add_header Allow "GET, POST" always;
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      location /files {
          root /usr/share/nginx/html;
          index index.html;
          autoindex on;
      }

      location /upload {
        content_by_lua_block {

          function dump(o)
            if type(o) == 'table' then
                local s = '{ '
                for k,v in pairs(o) do
                  if type(k) ~= 'number' then k = '"'..k..'"' end
                  s = s .. '['..k..'] = ' .. dump(v) .. ','
                end
                return s .. '} '
            else
                return tostring(o)
            end
          end

          file = io.open(ngx.var.http_temploc, "rb")
          request_body = file:read("*a")
          sep = string.match(request_body, '([%s%S]-)\r')
          pathdata = {}
          for str in string.gmatch(request_body, sep..".-\n\r\n(.-)"..sep) do
              table.insert(pathdata, str)
          end
          path = string.gsub(pathdata[1], '^%s*(.-)%s*$', '%1');
          namedata = {}
          for str in string.gmatch(request_body, sep.."\r.-\r\n\r.-\r"..sep.."\r.-\r\n\r(.-)\r"..sep) do
              table.insert(namedata, str)
          end
          filename = string.gsub(namedata[1], '^%s*(.-)%s-%-$', '%1');
          data = {}
          for str in string.gmatch(request_body, sep.."\r.-\n\r\n(.-)"..sep) do
                table.insert(data, str)
          end
          filedata = string.gsub(data[2], '^(.-)\r\n$', '%1');
          file:close()
          filepath = "/usr/share/nginx/html/files/" .. path .. "/" .. filename;
          os.execute("cd /usr/share/nginx/html/files")
          os.execute("mkdir -p /usr/share/nginx/html/files/" .. path)
          local file, err = io.open(filepath, "wb");
          if file==nil then
              ngx.log(ngx.STDERR, "Couldn't open file: "..err)
          else
              file:write(filedata)
              file:close()
              return 201 
          end
        }
      }

      location /files_upload {
        proxy_read_timeout 300s;
        proxy_connect_timeout 300s;
        limit_except POST              { deny all; }
        client_body_temp_path          /tmp;
        client_body_in_file_only       on;
        client_body_buffer_size        128K;
        proxy_pass_request_headers     on;
        proxy_set_header content-type "text/html";
        proxy_set_header temploc       $request_body_file;
        proxy_pass                     http://127.0.0.1/upload;
        proxy_redirect                 off;
      }
    }